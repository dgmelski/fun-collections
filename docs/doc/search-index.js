var searchIndex = JSON.parse('{\
"fun_collections":{"doc":"“Functional” collections that provide memory-efficient …","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FunMap","FunStack","borrow","borrow","borrow_mut","borrow_mut","clear","clone","clone","clone_into","clone_into","cmp","contains","contains","default","default","diff","diff_with","drop","entry","eq","extend","extend","first_key_value","fmap","fmt","fmt","for_each_mut","from","from","from","from","from_iter","from_iter","get","get_mut","insert","intersect","intersect_with","into","into","into_iter","is_empty","is_empty","iter","iter","iter_mut","join","join_with","last_key_value","len","len","new","new","partial_cmp","pop","push","remove","remove","split","split_off","split_off","sym_diff","sym_diff_with","to_owned","to_owned","top","top_mut","try_from","try_from","try_into","try_into","type_id","type_id","union","union_with"],"q":["fun_collections","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Implements a stack with constant time <code>push</code>, <code>pop</code>, and <code>clone</code> …","","","","","Removes all elements from the stack.","","","","","","","Tests if the element x occurs in the stack.","","","Builds a map with entries from the LHS map with keys that …","Removes entries with keys from the other map.","","","","","Pushes elements from an iterator onto the stack.","Returns the key-value pair for the least key in the map","Creates a FunMap from a list of tuples.","","Prints the <code>FunStack</code> to the supplied <code>Formatter</code>.","Applies a function to every key-value pair in the map.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns a reference to the value associated with k.","Returns a mutable reference to the value associated with k.","Inserts a key-value pair in the map.","Creates a map with entries from the LHS that have keys in …","Discard entries that do not have a key from the other map.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the <code>FunStack&lt;T&gt;</code> into an <code>Iterator&lt;T&gt;</code>.","","Tests if there are any elements in the stack.","","Creates an iterator from the top to the bottom elements of …","Returns an iterator with mutable references.","Build a new map by joining two maps around a pivot key …","Join the RHS into this map.","Returns the key-value pair for the greatest key in the map","","Returns the number of elements in the stack.","","Creates an empty stack.","","Returns the top of the stack or <code>None</code> if empty.","Pushes an element on top of the stack.","Removes a key from a map and returns the unmapped value.","Removes and returns the element at the given index.","Splits a map on a key returning one map with entries less …","Moves all elements greater than a key into a new map …","Splits the stack at the given index, retaining the bottom …","Builds a map with entries from the LHS and RHS maps that …","Removes entries with keys from the other map and adds …","","","Returns a reference to the top of the stack, or <code>None</code> if …","Returns a mutable ref to the top of the stack or <code>None</code> if …","","","","","","","Builds a map with entries from both maps, with entries …","Adds the entries from other that don’t have keys in this …"],"i":[0,0,3,2,3,2,2,3,2,3,2,2,3,2,3,2,3,3,2,3,2,3,2,3,0,3,2,3,3,3,2,2,3,2,3,3,3,3,3,3,2,2,3,2,3,2,2,3,3,3,3,2,3,2,2,2,2,3,2,3,3,2,3,3,3,2,2,2,3,2,3,2,3,2,3,3],"f":[0,0,[[]],[[]],[[]],[[]],[[[2,[1]]]],[[[3,[1,1]]],[[3,[1,1]]]],[[[2,[1]]],[[2,[1]]]],[[]],[[]],[[[2,[[0,[1,4]]]],[2,[[0,[1,4]]]]],5],[[[3,[[0,[1,4]],1]]],6],[[[2,[1]]],6],[[],[[3,[[0,[1,4]],1]]]],[[],[[2,[1]]]],[[[3,[[0,[1,4]],1]],[3,[[0,[1,4]],1]]],[[3,[[0,[1,4]],1]]]],[[[3,[[0,[1,4]],1]],[3,[[0,[1,4]],1]]]],[2],[[[3,[[0,[1,4]],1]],[0,[1,4]]],[[0,[[0,[1,4]],1]]]],[[[2,[[0,[1,7]]]],[2,[[0,[1,7]]]]],6],[[[3,[[0,[1,4]],1]],8]],[[[2,[1]],8]],[[[3,[[0,[1,4]],1]]],9],0,[[[3,[[0,[1,10]],[0,[1,10]]]],11],12],[[[2,[[0,[1,10]]]],11],[[14,[13]]]],[[[3,[[0,[1,4]],1]],15]],[[]],[[],3],[[[16,[1]]],[[2,[1]]]],[[]],[8,[[3,[[0,[1,4]],1]]]],[8,[[2,[1]]]],[[[3,[[0,[1,4]],1]]],9],[[[3,[[0,[1,4]],1]]],9],[[[3,[[0,[1,4]],1]],[0,[1,4]],1],[[9,[1]]]],[[[3,[[0,[1,4]],1]],[3,[[0,[1,4]],1]]],[[3,[[0,[1,4]],1]]]],[[[3,[[0,[1,4]],1]],[3,[[0,[1,4]],1]]]],[[]],[[]],[[[2,[1]]]],[[[3,[[0,[1,4]],1]]],6],[[[2,[1]]],6],[[[3,[[0,[1,4]],1]]],[[0,[[0,[1,4]],1]]]],[[[2,[1]]],[[0,[1]]]],[[[2,[1]]],[[0,[1]]]],[[[3,[[0,[1,4]],1]],[0,[1,4]],1,[3,[[0,[1,4]],1]]],[[3,[[0,[1,4]],1]]]],[[[3,[[0,[1,4]],1]],[0,[1,4]],1,[3,[[0,[1,4]],1]]]],[[[3,[[0,[1,4]],1]]],9],[[[3,[[0,[1,4]],1]]],17],[[[2,[1]]],17],[[],[[3,[[0,[1,4]],1]]]],[[],[[2,[1]]]],[[[2,[[0,[1,18]]]],[2,[[0,[1,18]]]]],[[9,[5]]]],[[[2,[1]]],[[9,[1]]]],[[[2,[1]],1]],[[[3,[[0,[1,4]],1]]],[[9,[1]]]],[[[2,[1]],17],1],[[[3,[[0,[1,4]],1]]]],[[[3,[[0,[1,4]],1]]]],[[[2,[1]],17],[[2,[1]]]],[[[3,[[0,[1,4]],1]],[3,[[0,[1,4]],1]]],[[3,[[0,[1,4]],1]]]],[[[3,[[0,[1,4]],1]],[3,[[0,[1,4]],1]]]],[[]],[[]],[[[2,[1]]],9],[[[2,[1]]],9],[[],14],[[],14],[[],14],[[],14],[[],19],[[],19],[[[3,[[0,[1,4]],1]],[3,[[0,[1,4]],1]]],[[3,[[0,[1,4]],1]]]],[[[3,[[0,[1,4]],1]],[3,[[0,[1,4]],1]]]]],"p":[[8,"Clone"],[3,"FunStack"],[3,"FunMap"],[8,"Ord"],[4,"Ordering"],[15,"bool"],[8,"PartialEq"],[8,"IntoIterator"],[4,"Option"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[8,"FnMut"],[3,"Vec"],[15,"usize"],[8,"PartialOrd"],[3,"TypeId"]]},\
"lazy_clone_collections":{"doc":"“Functional” collections that provide memory-efficient …","t":[3,3,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AvlMap","AvlSet","BTreeMap","Stack","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clone","clone","clone_into","clone_into","cmp","cmp","contains","contains","contains","default","default","default","diff","diff_with","drop","entry","eq","eq","extend","extend","first","first_key_value","fmt","fmt","for_each","for_each_mut","from","from","from","from","from","from_iter","from_iter","get","get_mut","hash","index","insert","insert","intersect","intersect_with","into","into","into","into_iter","is_empty","is_empty","is_empty","iter","iter","iter","iter_mut","iter_mut","join","join_with","last","last_key_value","len","len","len","new","new","new","partial_cmp","partial_cmp","pop","push","remove","remove","remove","split","split_off","split_off","sym_diff","sym_diff_with","to_owned","to_owned","top","top_mut","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","union_with"],"q":["lazy_clone_collections","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","Implements a stack with constant time <code>push</code>, <code>pop</code>, and <code>clone</code> …","","","","","","","Drops all elements from the map.","","Removes all elements from the stack.","","","","","","","","","Tests if the element x occurs in the stack.","","","","Builds a map with entries from the LHS map with keys that …","Removes entries with keys from the other map.","","","","","","Pushes elements from an iterator onto the stack.","","Returns the key-value pair for the least key in the map","","Prints the <code>Stack</code> to the supplied <code>Formatter</code>.","Applies the function f to each entry in the map in order …","Applies a function to every key-value pair in the map.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns a reference to the value associated with k.","Returns a mutable reference to the value associated with k.","","","Inserts a key-value pair in the map.","","Creates a map with entries from the LHS that have keys in …","Discard entries that do not have a key from the other map.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the <code>Stack&lt;T&gt;</code> into an <code>Iterator&lt;T&gt;</code>.","","","Tests if there are any elements in the stack.","Creates an iterator over the map entries, sorted by key.","","Creates an iterator from the top to the bottom elements of …","","Returns an iterator with mutable references.","Build a new map by joining two maps around a pivot key …","Join the RHS into this map.","","Returns the key-value pair for the greatest key in the map","","","Returns the number of elements in the stack.","Creates a new, empty map.","","Creates an empty stack.","","","Returns the top of the stack or <code>None</code> if empty.","Pushes an element on top of the stack.","Removes a key from a map and returns the unmapped value.","","Removes and returns the element at the given index.","Splits a map on a key returning one map with entries less …","Moves all elements greater than a key into a new map and …","Splits the stack at the given index, retaining the bottom …","Builds a map with entries from the LHS and RHS maps that …","Removes entries with keys from the other map and adds …","","","Returns a reference to the top of the stack, or <code>None</code> if …","Returns a mutable ref to the top of the stack or <code>None</code> if …","","","","","","","","","","Builds a map with entries from both maps, with entries …","Adds the entries from other that don’t have keys in this …"],"i":[0,0,0,0,3,4,5,3,4,5,3,4,5,3,5,3,5,3,5,3,4,5,3,4,5,3,3,5,3,3,5,3,5,4,3,3,5,3,3,3,3,4,5,5,3,5,3,3,3,3,3,4,3,3,3,4,5,5,3,4,5,3,4,5,3,5,3,3,4,3,3,4,5,3,4,5,3,5,5,5,3,4,5,3,3,5,3,3,3,5,5,5,3,4,5,3,4,5,3,4,5,3,3],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[[0,[1,2]],1]]]],[[[4,[[0,[1,2]]]]]],[[[5,[1]]]],[[[3,[1,1]]],[[3,[1,1]]]],[[[5,[1]]],[[5,[1]]]],[[]],[[]],[[3,3],6],[[[5,[[0,[1,2]]]],[5,[[0,[1,2]]]]],6],[[[3,[[0,[1,2]],1]]],7],[[[4,[[0,[1,2]]]]],7],[[[5,[1]]],7],[[],[[3,[[0,[1,2]],1]]]],[[],[[4,[[0,[1,2]]]]]],[[],[[5,[1]]]],[[[3,[[0,[1,2]],1]],[3,[[0,[1,2]],1]]],[[3,[[0,[1,2]],1]]]],[[[3,[[0,[1,2]],1]],[3,[[0,[1,2]],1]]]],[5],[[[3,[[0,[1,2]],1]],[0,[1,2]]],[[0,[[0,[1,2]],1]]]],[[[3,[[0,[1,2]],1]],[3,[[0,[1,2]],1]]],7],[[[5,[[0,[1,8]]]],[5,[[0,[1,8]]]]],7],[[[3,[[0,[1,2]],1]],9]],[[[5,[1]],9]],[[[4,[[0,[1,2]]]]],10],[[[3,[[0,[1,2]],1]]],10],[[[3,[[0,[1,11]],[0,[1,11]]]],12],13],[[[5,[[0,[1,11]]]],12],[[15,[14]]]],[[[3,[[0,[1,2]],1]],16]],[[[3,[[0,[1,2]],1]],16]],[[]],[[],3],[[]],[[[17,[1]]],[[5,[1]]]],[[]],[9,[[3,[[0,[1,2]],1]]]],[9,[[5,[1]]]],[[[3,[[0,[1,2]],1]]],10],[[[3,[[0,[1,2]],1]]],10],[3],[3],[[[3,[[0,[1,2]],1]],[0,[1,2]],1],[[10,[1]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],7],[[[3,[[0,[1,2]],1]],[3,[[0,[1,2]],1]]],[[3,[[0,[1,2]],1]]]],[[[3,[[0,[1,2]],1]],[3,[[0,[1,2]],1]]]],[[]],[[]],[[]],[[[5,[1]]]],[[[3,[[0,[1,2]],1]]],7],[[[4,[[0,[1,2]]]]],7],[[[5,[1]]],7],[[[3,[[0,[1,2]],1]]],[[0,[[0,[1,2]],1]]]],[[[4,[[0,[1,2]]]]],18],[[[5,[1]]],[[0,[1]]]],[[[3,[[0,[1,2]],1]]],[[0,[[0,[1,2]],1]]]],[[[5,[1]]],[[0,[1]]]],[[[3,[[0,[1,2]],1]],[0,[1,2]],1,[3,[[0,[1,2]],1]]],[[3,[[0,[1,2]],1]]]],[[[3,[[0,[1,2]],1]],[0,[1,2]],1,[3,[[0,[1,2]],1]]]],[[[4,[[0,[1,2]]]]],10],[[[3,[[0,[1,2]],1]]],10],[[[3,[[0,[1,2]],1]]],19],[[[4,[[0,[1,2]]]]],19],[[[5,[1]]],19],[[],[[3,[[0,[1,2]],1]]]],[[],[[4,[[0,[1,2]]]]]],[[],[[5,[1]]]],[[3,3],[[10,[6]]]],[[[5,[[0,[1,20]]]],[5,[[0,[1,20]]]]],[[10,[6]]]],[[[5,[1]]],[[10,[1]]]],[[[5,[1]],1]],[[[3,[[0,[1,2]],1]]],[[10,[1]]]],[[[4,[[0,[1,2]]]]],7],[[[5,[1]],19],1],[[[3,[[0,[1,2]],1]]]],[[[3,[[0,[1,2]],1]]]],[[[5,[1]],19],[[5,[1]]]],[[[3,[[0,[1,2]],1]],[3,[[0,[1,2]],1]]],[[3,[[0,[1,2]],1]]]],[[[3,[[0,[1,2]],1]],[3,[[0,[1,2]],1]]]],[[]],[[]],[[[5,[1]]],10],[[[5,[1]]],10],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],21],[[],21],[[],21],[[[3,[[0,[1,2]],1]],[3,[[0,[1,2]],1]]],[[3,[[0,[1,2]],1]]]],[[[3,[[0,[1,2]],1]],[3,[[0,[1,2]],1]]]]],"p":[[8,"Clone"],[8,"Ord"],[3,"AvlMap"],[3,"AvlSet"],[3,"Stack"],[4,"Ordering"],[15,"bool"],[8,"PartialEq"],[8,"IntoIterator"],[4,"Option"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[8,"FnMut"],[3,"Vec"],[8,"Iterator"],[15,"usize"],[8,"PartialOrd"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
