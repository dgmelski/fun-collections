var searchIndex = JSON.parse('{\
"lazy_clone_collections":{"doc":"Lazy Clone Collections","t":[3,3,6,6,4,16,8,13,3,3,13,3,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AvlMap","AvlSet","BTreeMap","BTreeSet","Entry","Key","Map","Occupied","OccupiedEntry","Stack","Vacant","VacantEntry","Value","and_modify","append","append","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","btree","clear","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","contains","contains","contains_key","default","default","default","difference","drop","entry","eq","eq","eq","extend","extend","extend","extend","extend","first","first_entry","first_key_value","fmt","fmt","fmt","fmt","fmt","fmt","for_each","for_each_mut","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","get","get","get","get_key_value","get_mut","get_mut","get_mut_","get_mut_","hash","hash","index","insert","insert","insert","insert","insert_","insert_","intersection","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_keys","into_mut","into_values","is_disjoint","is_empty","is_empty","is_empty","is_subset","is_superset","iter","iter","iter","iter_mut","iter_mut","key","key","key","keys","last","last_entry","last_key_value","len","len","len","new","new","new","new_diff","new_diff","new_intersect","new_intersection","new_join","new_sym_diff","new_sym_diff","new_union","new_union","or_default","or_insert","or_insert_with","or_insert_with_key","partial_cmp","partial_cmp","partial_cmp","pop","pop_first","pop_first","pop_last","pop_last","push","remove","remove","remove","remove","remove_entry","remove_entry","replace","retain","retain","split_off","split_off","split_off","sub","symmetric_difference","take","to_owned","to_owned","to_owned","top","top_mut","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","values","values_mut","BTreeMap","IntoIter","Iter","IterMut","Range","RangeMut","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","btree_set","clear","clone","clone_into","cmp","contains_key","default","entry","eq","extend","first_entry","first_key_value","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_iter","get","get_key_value","get_mut","get_mut_","insert","insert_","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_keys","into_values","is_empty","iter","iter_mut","keys","last_entry","last_key_value","len","len","len","len","new","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","partial_cmp","pop_first","pop_last","range","range_mut","remove","retain","size_hint","size_hint","split_off","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","BTreeSet","Difference","Intersection","IntoIter","Iter","SymmetricDifference","Union","append","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone_into","cmp","contains","default","difference","eq","extend","extend","first","fmt","from","from","from","from","from","from","from","from","from_iter","get","hash","insert","intersection","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","last","len","len","len","new","new_diff","new_intersection","new_sym_diff","new_union","next","next","next","next","next","next","next_back","next_back","partial_cmp","pop_first","pop_last","range","remove","retain","split_off","sub","symmetric_difference","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union"],"q":["lazy_clone_collectionslazy_clone_collections::btree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lazy_clone_collections::btree::btree_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A map from keys to values sorted by key.","A sorted set of values.","","","","","","","","Implements a stack with constant time <code>push</code>, <code>pop</code>, and <code>clone</code> …","","","","","Moves all elements from other into self and leaves other …","Move all the elements of other into self leaving other …","","","","","","","","","","","","","","","","","Removes all elements from the stack.","Removes all the entries from self.","Drops all elements from the map.","","","","","","","","","","Tests if the element x occurs in the stack.","Tests if self contains the given value.","Tests if the map contains a value for the given key.","","","","Returns an iterator over elements in self and not in other","","Returns an Entry that simplifies some update operations.","","","","Pushes elements from an iterator onto the stack.","","","","","Returns the least value in the set.","Return an Entry for the least key in the map.","Returns the key-value pair for the least key in the map","Prints the <code>Stack</code> to the supplied <code>Formatter</code>.","","Format and AvlMap using “map” notation.","","","","Applies f to each entry of the map in order of the keys.","Applies a function to every key-value pair in the map.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns a reference to the element matching value, if it …","Returns a reference to the value associated with key.","","Returns the entry for the given key.","Returns a mutable reference to the value associated with k.","","","","","","","Inserts the given value and returns true if self did not …","Inserts a key-value pair in the map.","","","","","Returns an iterator of the values that are in both self …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the <code>Stack&lt;T&gt;</code> into an <code>Iterator&lt;T&gt;</code>.","","","","","","","Converts the map into an iterator over its keys.","","Converts the map into an iterator over its values, ordered …","Returns true if self and other have no common values and …","Tests if there are any elements in the stack.","Returns true if self is the empty set, false otherwise.","Returns true if self contains no entries, false otherwise.","Tests if self is a subset of other.","tests if self is a superset of other.","Creates an iterator from the top to the bottom elements of …","Returns an iterator over self’s values in sorted order.","Creates an iterator over the map entries, sorted by key.","Returns an iterator with mutable references.","Returns iterator of the map’s entries, sorted by key, …","","","","Produces an iterator over the keys of the map, in sorted …","Returns the greatest value in self.","Return an Entry for the greatest key in the map.","Returns the key-value pair for the greatest key in the map","Returns the number of elements in the stack.","Returns the number of elements in self.","Returns the number of entries in self.","Creates an empty stack.","Returns a new, empty set.","Creates a new, empty map.","Creates a new set with the elements of lhs that are not in …","Builds a map with entries from the LHS map with keys that …","Creates a map with entries from the LHS that have keys in …","Creates a new set with the elements of lhs that are also …","Build a new map by joining two maps around a pivot key …","Creates a new set with the elements that are in lhs or rhs …","Builds a map with entries from the LHS and RHS maps that …","Creates a new set with the elements of both lhs and rhs.","Builds a map with entries from both maps, with entries …","","","","","","","","Returns the top of the stack or <code>None</code> if empty.","Removes the first element from the set and returns it.","Removes the entry with the least key and returns it.","Removes the last element from the set and returns it.","Removes the entry with the greatest key and returns it.","Pushes an element on top of the stack.","Removes and returns the element at the given index.","Removes the given value from self returning true if the …","Removes the entry for the given key and returns the …","","Removes and returns the entry matching the given key.","","Replace and return the matching value in the map.","Retain values for which f returns true and discard others","Applies f to each map entry, discarding those for which f …","Splits the stack at the given index, retaining the bottom …","Removes all elements greater or equal to key and returns …","Moves all elements greater than or equal to the provided …","","Returns an iterator over elements in self or other but not …","Removes and returns the set member that matches value.","","","","Returns a reference to the top of the stack, or <code>None</code> if …","Returns a mutable ref to the top of the stack or <code>None</code> if …","","","","","","","","","","","","","","","","","","","Returns an iterator over the elements of self and other, …","Produces an iterator over the values of the map, ordered …","Returns an iterator of mutable references to the map’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an Entry that simplifies some update operations.","","","Return an Entry for the least key in the map.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Retrieves the value associated with the given key, if …","Retrieves the entry associated with the given key, if …","","","Associates ‘val’ with ‘key’ and returns the value …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Return an Entry for the least key in the map.","","","","","","","","","","","","","","","","","","","","","","Removes and returns the value associated with key, if it …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Moves all elements from other into self and leaves other …","","","","","","","","","","","","","","","","","","Removes all the entries from self.","","","","Tests if self contains the given value.","","Returns an iterator over elements in self and not in other","","","","Returns the least value in the set.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a reference to the element matching value, if it …","","Inserts the given value and returns true if self did not …","Returns an iterator of the values that are in both self …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns true if self and other have no common values and …","Returns true if self is the empty set, false otherwise.","Tests if self is a subset of other.","tests if self is a superset of other.","Returns an iterator over self’s values in sorted order.","Returns the greatest value in self.","","","Returns the number of elements in self.","Returns a new, empty set.","Creates a new set with the elements of lhs that are not in …","Creates a new set with the elements of lhs that are also …","Creates a new set with the elements that are in lhs or rhs …","Creates a new set with the elements of both lhs and rhs.","","","","","","","","","","Removes the first element from the set and returns it.","Removes the last element from the set and returns it.","","Removes the given value from self returning true if the …","Retain values for which f returns true and discard others","Removes all elements greater or equal to key and returns …","","Returns an iterator over elements in self or other but not …","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over the elements of self and other, …"],"i":[0,0,0,0,0,1,0,2,0,0,2,0,1,2,3,4,3,3,3,5,3,4,18,19,2,5,3,4,18,19,2,0,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,3,5,4,5,3,4,5,3,3,4,4,3,4,4,5,3,4,18,19,2,4,4,5,5,3,3,4,4,18,19,2,5,3,4,3,4,18,4,4,18,1,4,3,4,4,3,4,18,19,1,4,3,5,3,4,18,19,2,5,3,3,4,4,4,19,4,18,4,3,5,3,4,3,3,5,3,4,5,4,18,19,2,4,3,4,4,5,3,4,5,3,4,3,4,4,3,4,3,4,3,4,2,2,2,2,5,3,4,5,3,4,3,4,5,5,3,4,18,4,18,3,3,4,5,3,4,3,3,3,5,3,4,5,5,5,3,4,18,19,2,5,3,4,18,19,2,5,3,4,18,19,2,3,4,4,0,0,0,0,0,0,28,29,30,28,31,32,33,29,30,28,31,32,33,0,28,28,28,28,28,28,28,28,28,28,28,29,30,28,31,32,33,29,30,28,28,31,32,33,28,28,28,28,28,28,28,29,30,28,31,32,33,29,30,28,31,32,33,28,28,28,28,28,28,28,28,28,31,32,33,28,29,30,31,32,33,29,30,31,32,33,28,28,28,28,28,28,28,29,30,28,28,29,30,28,31,32,33,29,30,28,31,32,33,29,30,28,31,32,33,28,28,0,0,0,0,0,0,0,34,34,34,34,37,38,34,35,36,39,40,37,38,34,35,36,39,40,34,34,34,34,34,34,34,34,34,34,34,34,37,38,34,34,35,36,39,40,34,34,34,34,34,37,38,34,35,36,39,40,37,38,34,34,35,36,39,40,34,34,34,34,34,34,37,38,34,34,34,34,34,34,37,38,35,36,39,40,37,38,34,34,34,34,34,34,34,34,34,34,37,38,34,35,36,39,40,37,38,34,35,36,39,40,37,38,34,35,36,39,40,34],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]]],[[2,[1]]]],[[3,3]],[[4,4]],[[3,3]],[[3,3]],[[3,3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[5],[3],[4],[[[5,[6]]],[[5,[6]]]],[[[3,[6]]],[[3,[6]]]],[[[4,[6,6]]],[[4,[6,6]]]],[[]],[[]],[[]],[[[5,[[0,[6,7]]]],[5,[[0,[6,7]]]]],8],[[[3,[7]],[3,[7]]],8],[[[4,[7,7]],[4,[7,7]]],8],[5,9],[3,9],[4,9],[[],5],[[],3],[[],4],0,[5],[4,[[2,[4]]]],[[[5,[10]],[5,[10]]],9],[[[3,[10]],3],9],[[4,4],9],[[[5,[6]],11]],[[[3,[[0,[6,7]]]],11]],[[[3,[[0,[6,7]]]],11]],[[[4,[[0,[6,7]],6]],11]],[[[4,[[0,[6,7]],6]],11]],[3,12],[4,[[2,[4]]]],[4,12],[[[5,[13]],14],[[16,[15]]]],[[[3,[13]],14],17],[[[4,[13,13]],14],17],[[[18,[13,13]],14],17],[[[19,[[0,[13,1]]]],14],17],[[[2,[[0,[13,1]]]],14],17],[[4,20]],[[4,20]],[[]],[[[21,[6]]],[[5,[6]]]],[[],[[3,[[0,[6,7]]]]]],[[]],[[],4],[[]],[[]],[[]],[[]],[11,[[5,[6]]]],[11,[[3,[[0,[6,7]]]]]],[11,[[4,[[0,[6,7]],6]]]],[3,12],[4,12],[[[18,[6]]]],[4,12],[4,12],[[[18,[6]]]],[[],12],[4,12],[[[3,[22]]]],[4],[4],[3,9],[4,12],[[[18,[6]],6],6],[[[19,[1]]]],[[],12],[4,12],0,[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[6]]]],[[[3,[6]]]],[3],[4],[4],[[[4,[6,6]]]],[[[19,[1]]]],[4,23],[[[18,[6]]]],[4,23],[[3,3],9],[5,9],[3,9],[4,9],[[3,3],9],[[3,3],9],0,0,0,0,0,[[[18,[6]]]],[[[19,[1]]]],[[[2,[1]]]],[4,23],[3,12],[4,[[2,[4]]]],[4,12],[5,24],[3,24],[4,24],[[],5],[[],3],[[],4],[[3,3],3],[[4,4],4],[[4,4],4],[[3,3],3],[[4,4],4],[[3,3],3],[[4,4],4],[[3,3],3],[[4,4],4],[[[2,[1]]]],[[[2,[1]]]],[[[2,[1]],25]],[[[2,[1]],25]],[[[5,[[0,[6,26]]]],[5,[[0,[6,26]]]]],[[12,[8]]]],[[[3,[26]],[3,[26]]],[[12,[8]]]],[[4,4],[[12,[8]]]],[5,12],[3,12],[4,12],[3,12],[4,12],[5],[[5,24]],[3,9],[4,12],[[[18,[6]]],6],[4,12],[[[18,[6]]]],[3,12],[3],[4],[[5,24],5],[3,3],[4,4],[[3,3]],0,[3,12],[[]],[[]],[[]],[5,12],[5,12],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],0,[4,23],[4,23],0,0,0,0,0,0,[[28,28]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[28],[[[28,[6,6]]],[[28,[6,6]]]],[[]],[[28,28],8],[28,9],[[],28],[28,[[2,[28]]]],[[28,28],9],[[28,11]],[28,[[2,[28]]]],[28,12],[[29,14],[[16,[15]]]],[[30,14],[[16,[15]]]],[[28,14],17],[[[31,[13,13]],14],17],[[[32,[13,13]],14],17],[[[33,[13,13]],14],17],[[]],[[]],[[]],[[],28],[[]],[[]],[[]],[11,28],[28,12],[28,12],[28,12],[28,12],[28,12],[28,12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28],[[]],[[]],[[]],[28,23],[28,23],[28,9],[28,31],[28,32],[28,23],[28,[[2,[28]]]],[28,12],[28,24],[31,24],[32,24],[33,24],[[],28],[29,12],[30,12],[31,12],[32,12],[33,12],[29,12],[30,12],[31,12],[32,12],[33,12],[[28,28],[[12,[8]]]],[28,12],[28,12],[28,29],[28,30],[28,12],[28],[29],[30],[28,28],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[28,23],[28,23],0,0,0,0,0,0,0,[[34,34]],[[34,34]],[[34,34]],[[34,34]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[34],[[[34,[6]]],[[34,[6]]]],[[]],[[[34,[7]],[34,[7]]],8],[34,9],[[],34],[[34,34],35],[[[34,[10]],34],9],[[[34,[[0,[6,7]]]],11]],[[[34,[[0,[6,7]]]],11]],[34,12],[[[34,[13]],14],17],[[]],[[]],[[]],[[],[[34,[[0,[6,7]]]]]],[[]],[[]],[[]],[[]],[11,[[34,[[0,[6,7]]]]]],[34,12],[[[34,[22]]]],[34,9],[[34,34],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[34,[6]]]],[34],[[]],[[]],[[]],[[]],[[34,34],9],[34,9],[[34,34],9],[[34,34],9],[34,37],[34,12],[37,24],[[[38,[6]]],24],[34,24],[[],34],[[34,34],34],[[34,34],34],[[34,34],34],[[34,34],34],[37,12],[[[38,[6]]],12],[[[35,[7]]],12],[[[36,[7]]],12],[[[39,[7]]],12],[[[40,[7]]],12],[37,12],[[[38,[6]]],12],[[[34,[26]],[34,[26]]],[[12,[8]]]],[34,12],[34,12],[34,23],[34,9],[34],[34,34],[[34,34]],[[34,34],40],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[34,34],39]],"p":[[8,"Map"],[4,"Entry"],[3,"AvlSet"],[3,"AvlMap"],[3,"Stack"],[8,"Clone"],[8,"Ord"],[4,"Ordering"],[15,"bool"],[8,"PartialEq"],[8,"IntoIterator"],[4,"Option"],[8,"Debug"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[3,"OccupiedEntry"],[3,"VacantEntry"],[8,"FnMut"],[3,"Vec"],[8,"Hash"],[8,"Iterator"],[15,"usize"],[8,"FnOnce"],[8,"PartialOrd"],[3,"TypeId"],[3,"BTreeMap"],[3,"Range"],[3,"RangeMut"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"BTreeSet"],[3,"Difference"],[3,"Intersection"],[3,"Iter"],[3,"IntoIter"],[3,"Union"],[3,"SymmetricDifference"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
