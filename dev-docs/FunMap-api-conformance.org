**Rust API Guidelines Checklist**
* Naming (crate aligns with Rust naming conventions)
** TODO Casing conforms to RFC 430 (C-CASE)
** TODO Ad-hoc conversions follow as_, to_, into_ conventions (C-CONV)
** TODO Getter names follow Rust convention (C-GETTER)
** TODO Methods on collections that produce iterators follow iter, iter_mut, into_iter (C-ITER)
** TODO Iterator type names match the methods that produce them (C-ITER-TY)
** TODO Feature names are free of placeholder words (C-FEATURE)
** TODO Names use a consistent word order (C-WORD-ORDER)
* Interoperability (crate interacts nicely with other library functionality)
** TODO Types eagerly implement common traits (C-COMMON-TRAITS)
* Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Display, Default
** TODO Conversions use the standard traits From, AsRef, AsMut (C-CONV-TRAITS)
** TODO Collections implement FromIterator and Extend (C-COLLECT)
** TODO Data structures implement Serde's Serialize, Deserialize (C-SERDE)
** TODO Types are Send and Sync where possible (C-SEND-SYNC)
** TODO Error types are meaningful and well-behaved (C-GOOD-ERR)
** TODO Binary number types provide Hex, Octal, Binary formatting (C-NUM-FMT)
** TODO Generic reader/writer functions take R: Read and W: Write by value (C-RW-VALUE)
* Macros (crate presents well-behaved macros)
** TODO Input syntax is evocative of the output (C-EVOCATIVE)
** TODO Macros compose well with attributes (C-MACRO-ATTR)
** TODO Item macros work anywhere that items are allowed (C-ANYWHERE)
** TODO Item macros support visibility specifiers (C-MACRO-VIS)
** TODO Type fragments are flexible (C-MACRO-TY)
* Documentation (crate is abundantly documented)
** TODO Crate level docs are thorough and include examples (C-CRATE-DOC)
** TODO All items have a rustdoc example (C-EXAMPLE)
** TODO Examples use ?, not try!, not unwrap (C-QUESTION-MARK)
** TODO Function docs include error, panic, and safety considerations (C-FAILURE)
** TODO Prose contains hyperlinks to relevant things (C-LINK)
** TODO Cargo.toml includes all common metadata (C-METADATA)
* authors, description, license, homepage, documentation, repository, keywords, categories
** TODO Release notes document all significant changes (C-RELNOTES)
** TODO Rustdoc does not show unhelpful implementation details (C-HIDDEN)
* Predictability (crate enables legible code that acts how it looks)
** TODO Smart pointers do not add inherent methods (C-SMART-PTR)
** TODO Conversions live on the most specific type involved (C-CONV-SPECIFIC)
** TODO Functions with a clear receiver are methods (C-METHOD)
** TODO Functions do not take out-parameters (C-NO-OUT)
** TODO Operator overloads are unsurprising (C-OVERLOAD)
** TODO Only smart pointers implement Deref and DerefMut (C-DEREF)
** TODO Constructors are static, inherent methods (C-CTOR)
* Flexibility (crate supports diverse real-world use cases)
** TODO Functions expose intermediate results to avoid duplicate work (C-INTERMEDIATE)
** TODO Caller decides where to copy and place data (C-CALLER-CONTROL)
** TODO Functions minimize assumptions about parameters by using generics (C-GENERIC)
** TODO Traits are object-safe if they may be useful as a trait object (C-OBJECT)
* Type safety (crate leverages the type system effectively)
** TODO Newtypes provide static distinctions (C-NEWTYPE)
** TODO Arguments convey meaning through types, not bool or Option (C-CUSTOM-TYPE)
** TODO Types for a set of flags are bitflags, not enums (C-BITFLAG)
** TODO Builders enable construction of complex values (C-BUILDER)
* Dependability (crate is unlikely to do the wrong thing)
** TODO Functions validate their arguments (C-VALIDATE)
** TODO Destructors never fail (C-DTOR-FAIL)
** TODO Destructors that may block have alternatives (C-DTOR-BLOCK)
* Debuggability (crate is conducive to easy debugging)
** TODO All public types implement Debug (C-DEBUG)
** TODO Debug representation is never empty (C-DEBUG-NONEMPTY)
* Future proofing (crate is free to improve without breaking users' code)
** TODO Sealed traits protect against downstream implementations (C-SEALED)
** TODO Structs have private fields (C-STRUCT-PRIVATE)
** TODO Newtypes encapsulate implementation details (C-NEWTYPE-HIDE)
** TODO Data structures do not duplicate derived trait bounds (C-STRUCT-BOUNDS)
* Necessities (to whom they matter, they really matter)
** TODO Public dependencies of a stable crate are stable (C-STABLE)
** TODO Crate and its dependencies have a permissive license (C-PERMISSIVE)
